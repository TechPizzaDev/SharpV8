diff --git a/BUILD.gn b/BUILD.gn
index 61187af305..29cbacefca 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -1062,7 +1062,7 @@ config("toolchain") {
   visibility = [ "./*" ]
 
   defines = []
-  cflags = []
+  cflags = [ "-Wno-invalid-offsetof", "-Wno-unused-result", "-Wno-deprecated-copy-with-user-provided-copy", "-Wno-extra-semi", "-Wno-c++98-compat-extra-semi" ]
   ldflags = []
 
   if (v8_current_cpu == "arm") {
diff --git a/include/libplatform/libplatform.h b/include/libplatform/libplatform.h
index 9ec60c04f9..a5c268db93 100644
--- a/include/libplatform/libplatform.h
+++ b/include/libplatform/libplatform.h
@@ -43,6 +43,8 @@ V8_PLATFORM_EXPORT std::unique_ptr<v8::Platform> NewDefaultPlatform(
         InProcessStackDumping::kDisabled,
     std::unique_ptr<v8::TracingController> tracing_controller = {});
 
+V8_PLATFORM_EXPORT std::unique_ptr<v8::PageAllocator> NewDefaultPageAllocator();
+
 /**
  * The same as NewDefaultPlatform but disables the worker thread pool.
  * It must be used with the --single-threaded V8 flag.
diff --git a/include/v8-initialization.h b/include/v8-initialization.h
index d3e35d6ec5..2d2fb458fe 100644
--- a/include/v8-initialization.h
+++ b/include/v8-initialization.h
@@ -136,6 +136,7 @@ class V8_EXPORT V8 {
    * of the data file has to be provided.
    */
   static bool InitializeICU(const char* icu_data_file = nullptr);
+  static bool InitializeICU(const char* icu_data_ptr, size_t size);
 
   /**
    * Initialize the ICU library bundled with V8. The embedder should only
diff --git a/src/api/api.cc b/src/api/api.cc
index 14b7c541b3..662b95e30a 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -6308,6 +6308,10 @@ bool v8::V8::InitializeICU(const char* icu_data_file) {
   return i::InitializeICU(icu_data_file);
 }
 
+bool v8::V8::InitializeICU(const char* icu_data_ptr, size_t size) {
+  return i::InitializeICU(icu_data_ptr, size);
+}
+
 bool v8::V8::InitializeICUDefaultLocation(const char* exec_path,
                                           const char* icu_data_file) {
   return i::InitializeICUDefaultLocation(exec_path, icu_data_file);
diff --git a/src/base/platform/platform.h b/src/base/platform/platform.h
index 88d35540b1..20863d6f5b 100644
--- a/src/base/platform/platform.h
+++ b/src/base/platform/platform.h
@@ -52,6 +52,8 @@
 #include <sanitizer/asan_interface.h>
 #endif  // V8_USE_ADDRESS_SANITIZER
 
+#define V8_NO_FAST_TLS
+
 #ifndef V8_NO_FAST_TLS
 #if V8_CC_MSVC && V8_HOST_ARCH_IA32
 // __readfsdword is supposed to be declared in intrin.h but it is missing from
diff --git a/src/builtins/builtins-async-module.cc b/src/builtins/builtins-async-module.cc
index 417e6f1dfa..108dc20972 100644
--- a/src/builtins/builtins-async-module.cc
+++ b/src/builtins/builtins-async-module.cc
@@ -15,7 +15,8 @@ BUILTIN(CallAsyncModuleFulfilled) {
       SourceTextModule::cast(isolate->context().get(
           SourceTextModule::ExecuteAsyncModuleContextSlots::kModule)),
       isolate);
-  if (SourceTextModule::AsyncModuleExecutionFulfilled(isolate, module)
+  Handle<Object> result(args.at(1));
+  if (SourceTextModule::AsyncModuleExecutionFulfilled(isolate, module, result)
           .IsNothing()) {
     // The evaluation of async module can not throwing a JavaScript observable
     // exception.
diff --git a/src/common/globals.h b/src/common/globals.h
index 4e6994294a..9be7a385c1 100644
--- a/src/common/globals.h
+++ b/src/common/globals.h
@@ -273,7 +273,7 @@ using CodeT = Code;
 //
 #if V8_HAS_PTHREAD_JIT_WRITE_PROTECT && \
     !(defined(V8_COMPRESS_POINTERS) && !defined(V8_EXTERNAL_CODE_SPACE))
-#define V8_HEAP_USE_PTHREAD_JIT_WRITE_PROTECT true
+#define V8_HEAP_USE_PTHREAD_JIT_WRITE_PROTECT false
 #else
 #define V8_HEAP_USE_PTHREAD_JIT_WRITE_PROTECT false
 #endif
diff --git a/src/diagnostics/unwinding-info-win64.cc b/src/diagnostics/unwinding-info-win64.cc
index 767eb015ab..acd70f7167 100644
--- a/src/diagnostics/unwinding-info-win64.cc
+++ b/src/diagnostics/unwinding-info-win64.cc
@@ -462,6 +462,14 @@ void InitUnwindingRecord(Record* record, size_t code_size_in_bytes) {
 namespace {
 
 V8_DECLARE_ONCE(load_ntdll_unwinding_functions_once);
+
+#if defined(V8_OS_WIN_X64)
+static decltype(
+    &::RtlAddFunctionTable) add_function_table_func = nullptr;
+static decltype(
+    &::RtlDeleteFunctionTable) delete_function_table_func = nullptr;
+#endif  // V8_OS_WIN_X64
+
 static decltype(
     &::RtlAddGrowableFunctionTable) add_growable_function_table_func = nullptr;
 static decltype(
@@ -469,6 +477,19 @@ static decltype(
     nullptr;
 
 void LoadNtdllUnwindingFunctionsOnce() {
+
+#if defined(V8_OS_WIN_X64)
+  HMODULE kernel32_module =
+	LoadLibraryEx(L"kernel32.dll", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
+  DCHECK_NOT_NULL(kernel32_module);
+  add_function_table_func =
+	reinterpret_cast<decltype(&::RtlAddFunctionTable)>(
+		::GetProcAddress(kernel32_module, "RtlAddFunctionTable"));
+  delete_function_table_func =
+	reinterpret_cast<decltype(&::RtlDeleteFunctionTable)>(
+		::GetProcAddress(kernel32_module, "RtlDeleteFunctionTable"));
+#endif  // V8_OS_WIN_X64
+
   // Load functions from the ntdll.dll module.
   HMODULE ntdll_module =
       LoadLibraryEx(L"ntdll.dll", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);
@@ -491,6 +512,21 @@ void LoadNtdllUnwindingFunctions() {
                  &LoadNtdllUnwindingFunctionsOnce);
 }
 
+#if defined(V8_OS_WIN_X64)
+BOOLEAN AddFunctionTable(PRUNTIME_FUNCTION FunctionTable,
+                         DWORD EntryCount,
+                         DWORD64 BaseAddress) {
+  LoadNtdllUnwindingFunctions();
+  DCHECK_NOT_NULL(add_function_table_func);
+  return add_function_table_func(FunctionTable, EntryCount, BaseAddress);
+}
+BOOLEAN DeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable) {
+  LoadNtdllUnwindingFunctions();
+  DCHECK_NOT_NULL(delete_function_table_func);
+  return delete_function_table_func(FunctionTable);
+}
+#endif  // V8_OS_WIN_X64
+
 bool AddGrowableFunctionTable(PVOID* DynamicTable,
                               PRUNTIME_FUNCTION FunctionTable, DWORD EntryCount,
                               DWORD MaximumEntryCount, ULONG_PTR RangeBase,
@@ -542,7 +578,7 @@ void RegisterNonABICompliantCodeRange(void* start, size_t size_in_bytes) {
       ExceptionHandlerRecord* record = new (start) ExceptionHandlerRecord();
       InitUnwindingRecord(record, size_in_bytes);
 
-      CHECK(::RtlAddFunctionTable(record->runtime_function,
+      CHECK(AddFunctionTable(record->runtime_function,
                                   kDefaultRuntimeFunctionCount,
                                   reinterpret_cast<DWORD64>(start)));
 
@@ -580,7 +616,7 @@ void UnregisterNonABICompliantCodeRange(void* start) {
     if (unhandled_exception_callback_g) {
       ExceptionHandlerRecord* record =
           reinterpret_cast<ExceptionHandlerRecord*>(start);
-      CHECK(::RtlDeleteFunctionTable(record->runtime_function));
+      CHECK(DeleteFunctionTable(record->runtime_function));
 
       // Unprotect reserved page.
       DWORD old_protect;
diff --git a/src/execution/isolate.h b/src/execution/isolate.h
index c25ad662bf..8cb926a654 100644
--- a/src/execution/isolate.h
+++ b/src/execution/isolate.h
@@ -657,7 +657,6 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
   // Returns the isolate inside which the current thread is running.
   V8_INLINE static Isolate* Current() {
     Isolate* isolate = TryGetCurrent();
-    DCHECK_NOT_NULL(isolate);
     return isolate;
   }
 
diff --git a/src/execution/stack-guard.cc b/src/execution/stack-guard.cc
index 2b4af70bc0..2607f22922 100644
--- a/src/execution/stack-guard.cc
+++ b/src/execution/stack-guard.cc
@@ -218,8 +218,10 @@ void StackGuard::FreeThreadResources() {
 void StackGuard::ThreadLocal::Initialize(Isolate* isolate,
                                          const ExecutionAccess& lock) {
   const uintptr_t kLimitSize = v8_flags.stack_size * KB;
-  DCHECK_GT(GetCurrentStackPosition(), kLimitSize);
   uintptr_t limit = GetCurrentStackPosition() - kLimitSize;
+  if (GetCurrentStackPosition() < kLimitSize) {
+    limit = 0;
+  }
   real_jslimit_ = SimulatorStack::JsLimitFromCLimit(isolate, limit);
   set_jslimit(SimulatorStack::JsLimitFromCLimit(isolate, limit));
   real_climit_ = limit;
diff --git a/src/heap/memory-chunk-layout.h b/src/heap/memory-chunk-layout.h
index 2e1d0e52bb..3161707e1e 100644
--- a/src/heap/memory-chunk-layout.h
+++ b/src/heap/memory-chunk-layout.h
@@ -73,6 +73,9 @@ class V8_EXPORT_PRIVATE MemoryChunkLayout {
     FIELD(ObjectStartBitmap, ObjectStartBitmap),
 #endif  // V8_ENABLE_INNER_POINTER_RESOLUTION_OSB
     FIELD(size_t, WasUsedForAllocation),
+#if defined(V8_TARGET_OS_WIN) && defined(V8_TARGET_ARCH_IA32)
+    FIELD(int32_t, Ia32Padding),
+#endif  // V8_TARGET_OS_WIN && V8_TARGET_ARCH_IA32
     kMarkingBitmapOffset,
     kMemoryChunkHeaderSize = kMarkingBitmapOffset,
     kMemoryChunkHeaderStart = kSlotSetOffset,
diff --git a/src/heap/memory-chunk.h b/src/heap/memory-chunk.h
index 906ff6a23e..d805577f9d 100644
--- a/src/heap/memory-chunk.h
+++ b/src/heap/memory-chunk.h
@@ -295,6 +295,10 @@ class MemoryChunk : public BasicMemoryChunk {
   // only for new space pages.
   size_t was_used_for_allocation_ = false;
 
+#if defined(V8_TARGET_OS_WIN) && defined(V8_TARGET_ARCH_IA32)
+  int32_t ia32_padding_;
+#endif // V8_TARGET_OS_WIN && V8_TARGET_ARCH_IA32
+
  private:
   friend class ConcurrentMarkingState;
   friend class MarkingState;
diff --git a/src/init/icu_util.cc b/src/init/icu_util.cc
index 67d349557c..49ffb52386 100644
--- a/src/init/icu_util.cc
+++ b/src/init/icu_util.cc
@@ -98,6 +98,26 @@ bool InitializeICU(const char* icu_data_file) {
 #endif
 }
 
+bool InitializeICU(const char* icu_data_ptr, size_t size) {
+#if !defined(V8_INTL_SUPPORT)
+  return true;
+#else
+#if ICU_UTIL_DATA_IMPL == ICU_UTIL_DATA_STATIC
+  return true;
+#elif ICU_UTIL_DATA_IMPL == ICU_UTIL_DATA_FILE
+  if (!icu_data_ptr) return false;
+  if (g_icu_data_ptr) return true;
+  g_icu_data_ptr = new char[size];
+  memcpy(g_icu_data_ptr, icu_data_ptr, size);
+  atexit(free_icu_data_ptr);
+  UErrorCode err = U_ZERO_ERROR;
+  udata_setCommonData(reinterpret_cast<void*>(g_icu_data_ptr), &err);
+  udata_setFileAccess(UDATA_ONLY_PACKAGES, &err);
+  return err == U_ZERO_ERROR;
+#endif
+#endif
+}
+
 #undef ICU_UTIL_DATA_FILE
 #undef ICU_UTIL_DATA_STATIC
 
diff --git a/src/init/icu_util.h b/src/init/icu_util.h
index e127e75f10..b0e4bd2d68 100644
--- a/src/init/icu_util.h
+++ b/src/init/icu_util.h
@@ -5,6 +5,8 @@
 #ifndef V8_INIT_ICU_UTIL_H_
 #define V8_INIT_ICU_UTIL_H_
 
+#include <stddef.h>
+
 namespace v8 {
 
 namespace internal {
@@ -12,6 +14,7 @@ namespace internal {
 // Call this function to load ICU's data tables for the current process.  This
 // function should be called before ICU is used.
 bool InitializeICU(const char* icu_data_file);
+bool InitializeICU(const char* icu_data_ptr, size_t size);
 
 // Like above, but using the default icudt[lb].dat location if icu_data_file is
 // not specified.
diff --git a/src/init/v8.cc b/src/init/v8.cc
index b6f68c6f17..c5df1bf83f 100644
--- a/src/init/v8.cc
+++ b/src/init/v8.cc
@@ -93,7 +93,6 @@ V8_DECLARE_ONCE(init_snapshot_once);
 
 void V8::InitializePlatform(v8::Platform* platform) {
   AdvanceStartupState(V8StartupState::kPlatformInitializing);
-  CHECK(!platform_);
   CHECK_NOT_NULL(platform);
   platform_ = platform;
   v8::base::SetPrintStackTrace(platform_->GetStackTracePrinter());
diff --git a/src/libplatform/default-platform.cc b/src/libplatform/default-platform.cc
index 2bbbb7e1f4..5cbd5e8c43 100644
--- a/src/libplatform/default-platform.cc
+++ b/src/libplatform/default-platform.cc
@@ -55,6 +55,10 @@ std::unique_ptr<v8::Platform> NewDefaultPlatform(
   return platform;
 }
 
+std::unique_ptr<v8::PageAllocator> NewDefaultPageAllocator() {
+  return std::make_unique<v8::base::PageAllocator>();
+}
+
 std::unique_ptr<v8::Platform> NewSingleThreadedDefaultPlatform(
     IdleTaskSupport idle_task_support,
     InProcessStackDumping in_process_stack_dumping,
diff --git a/src/objects/intl-objects.h b/src/objects/intl-objects.h
index 4339673d56..150e6e6756 100644
--- a/src/objects/intl-objects.h
+++ b/src/objects/intl-objects.h
@@ -285,7 +285,7 @@ class Intl {
       UErrorCode status = U_ZERO_ERROR;
       UEnumeration* uenum =
           uloc_openAvailableByType(ULOC_AVAILABLE_WITH_LEGACY_ALIASES, &status);
-      DCHECK(U_SUCCESS(status));
+      if (!U_SUCCESS(status)) return;
 
       std::vector<std::string> all_locales;
       const char* loc;
diff --git a/src/objects/js-date-time-format.cc b/src/objects/js-date-time-format.cc
index 6e6298e274..09ff972e98 100644
--- a/src/objects/js-date-time-format.cc
+++ b/src/objects/js-date-time-format.cc
@@ -2283,8 +2283,12 @@ MaybeHandle<JSDateTimeFormat> JSDateTimeFormat::New(
   //     requestedLocales, opt, %DateTimeFormat%.[[RelevantExtensionKeys]],
   //     localeData).
   //
+  const auto& available_locales = JSDateTimeFormat::GetAvailableLocales();
+  if (available_locales.empty()) {
+    THROW_NEW_ERROR(isolate, NewRangeError(MessageTemplate::kIcuError), JSDateTimeFormat);
+  }
   Maybe<Intl::ResolvedLocale> maybe_resolve_locale = Intl::ResolveLocale(
-      isolate, JSDateTimeFormat::GetAvailableLocales(), requested_locales,
+      isolate, available_locales, requested_locales,
       locale_matcher, relevant_extension_keys);
   if (maybe_resolve_locale.IsNothing()) {
     THROW_NEW_ERROR(isolate, NewRangeError(MessageTemplate::kIcuError),
diff --git a/src/objects/source-text-module.cc b/src/objects/source-text-module.cc
index fbb89b4617..915d4a450c 100644
--- a/src/objects/source-text-module.cc
+++ b/src/objects/source-text-module.cc
@@ -747,7 +747,7 @@ MaybeHandle<Object> SourceTextModule::Evaluate(
     if (!module->IsAsyncEvaluating()) {
       //   i. Perform ! Call(capability.[[Resolve]], undefined,
       //                     «undefined»).
-      JSPromise::Resolve(capability, isolate->factory()->undefined_value())
+      JSPromise::Resolve(capability, unused_result)
           .ToHandleChecked();
     }
 
@@ -760,7 +760,7 @@ MaybeHandle<Object> SourceTextModule::Evaluate(
 }
 
 Maybe<bool> SourceTextModule::AsyncModuleExecutionFulfilled(
-    Isolate* isolate, Handle<SourceTextModule> module) {
+    Isolate* isolate, Handle<SourceTextModule> module, Handle<Object> result) {
   // 1. If module.[[Status]] is evaluated, then
   if (module->status() == kErrored) {
     // a. Assert: module.[[EvaluationError]] is not empty.
@@ -784,7 +784,7 @@ Maybe<bool> SourceTextModule::AsyncModuleExecutionFulfilled(
     //                     «undefined»).
     Handle<JSPromise> capability(
         JSPromise::cast(module->top_level_capability()), isolate);
-    JSPromise::Resolve(capability, isolate->factory()->undefined_value())
+    JSPromise::Resolve(capability, result)
         .ToHandleChecked();
   }
 
@@ -850,7 +850,7 @@ Maybe<bool> SourceTextModule::AsyncModuleExecutionFulfilled(
           //                     undefined, «undefined»).
           Handle<JSPromise> capability(
               JSPromise::cast(m->top_level_capability()), isolate);
-          JSPromise::Resolve(capability, isolate->factory()->undefined_value())
+          JSPromise::Resolve(capability, unused_result)
               .ToHandleChecked();
         }
       }
diff --git a/src/objects/source-text-module.h b/src/objects/source-text-module.h
index 05a1cef551..9b58cc8385 100644
--- a/src/objects/source-text-module.h
+++ b/src/objects/source-text-module.h
@@ -58,7 +58,7 @@ class SourceTextModule
   // with async SourceTextModules. Return Nothing if the execution is
   // terminated.
   static Maybe<bool> AsyncModuleExecutionFulfilled(
-      Isolate* isolate, Handle<SourceTextModule> module);
+      Isolate* isolate, Handle<SourceTextModule> module, Handle<Object> result);
   static void AsyncModuleExecutionRejected(Isolate* isolate,
                                            Handle<SourceTextModule> module,
                                            Handle<Object> exception);
